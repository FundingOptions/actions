name: 'Setup Python'
description: 'a Wrapper for setting up python'
inputs:
  version:
    description: version of python to install
    required: true
  cache-version:
    description: version flag to help with busting the cache
    required: false
    default: 'setup-py-v1'
  working-directory:
    description: The directory to run everything in
    default: '.'
    required: false

outputs:
  version:
    description: version of python installed
    value: '${{ steps.install.outputs.python-version }}'
runs:
  using: 'composite'
  steps:
    - uses: actions/setup-python@v2
      id: install
      with:
        python-version: "${{ inputs.version }}"

    - uses: ./github-script
      id: package-manager
      with:
        script-file: '${{ github.action_path }}/detect-package-manager.js'
        working-directory: '${{ inputs.working-directory }}'

    - name: get pip cache directory
      id: pip-cache
      shell: bash
      working-directory: '${{ inputs.working-directory }}'
      run: |
        echo "::set-output name=dir::$(pip cache dir)"

    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - run: pip install -U pip wheel setuptools
      name: 'ensure latest installation dependencies'
      shell: bash

    - uses: ./setup/python/pipenv
      if: steps.package-manager.outputs.result == 'pipenv'
      name: 'Setup pipenv'
      with:
        cache-version: '${{ inputs.cache-version }}'
        working-directory: '${{ inputs.working-directory }}'

    - uses: ./setup/python/poetry
      if: steps.package-manager.outputs.result == 'poetry'
      name: 'Setup poetry'
      with:
        cache-version: '${{ inputs.cache-version }}'
        working-directory: '${{ inputs.working-directory }}'
